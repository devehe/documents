系统：ubuntu 12.04 32bit
toolchain: arm-none-eabi-
说明：工具链选择arm-none-eabi或者arm-none-linux-gnueabi都可以,笔者这里使用的是Codesourcery的arm-none-eabi-20110314.bin

参考资料：
http://www.cnblogs.com/jinmu190/archive/2011/03/21/1990698.html

1. 编译安装qemu
$ git clone http://repo.or.cz/w/qemu/mini2440.git
说明:笔者这里使用的版本是 2011-10-13的mini2440-qemu版本，这个版本中存在"浮点数例外“的bug，因此需要打补丁修正。

$ git checkout -b myqemu
创建一个myqemu分支用于打补丁，关于git详细请自行goolge。

打上如下补丁，或者手动修改。
diff --git a/sdl.c b/sdl.c
index 178b553..bdf412b 100644
--- a/sdl.c
+++ b/sdl.c
@@ -445,6 +445,7 @@ static void sdl_grab_end(void)
 static void sdl_send_mouse_event(int dx, int dy, int dz, int x, int y, int stat
 {
     int buttons;
+    if(width==1 && height==1) return;
     buttons = 0;
     if (state & SDL_BUTTON(SDL_BUTTON_LEFT))
         buttons |= MOUSE_EVENT_LBUTTON;

$ ./configure --target-list=arm-softmmu
如果出现如下提示：
Error: zlib check failed
Make sure to have the zlib libs and headers installed.
那么执行
$ sudo apt-get install zlib1g-dev 

同样，如果出现
Error: sdl check failed
则执行如下安装
$ sudo apt-get install libsdl1.2-dev 

$ make -j4
正确编译之后，会在arm-softmmu下生成qemu-system-arm文件
prife@smart:~/projects/git/mini2440-qemu$ ls -l arm-softmmu/qemu-system-arm
-rwxrwxr-x 1 prife prife 8455432  7月 11 19:05 arm-softmmu/qemu-system-arm

2. u-boot
我们既可以使用友善之臂官方提供的编译好的u-boot二进制，也可以自己基于源码编译

2.1 使用官方提供的u-boot
http://www.friendlyarm.net/downloads

2.2 手动编译uboot-mini2440
首先获取uboot源码
http://repo.or.cz/w/u-boot-openmoko/mini2440.git

$ git clone git://repo.or.cz/u-boot-openmoko/mini2440.git  uboot-mini2400
$  ./configure --target-list=arm-softmmu
$  make -j4
最后链接时遇到错误
arm-none has EABI version 5, but target u-boot has EABI version 0
参考这里得知：
~/documents/uboot-DULG-v38b.pdf  第143页知道原因
解决方法: patch如下。

diff --git a/Makefile b/Makefile
index 21c5f3f..f184b93 100644
--- a/Makefile
+++ b/Makefile
@@ -137,7 +137,7 @@ ifeq ($(ARCH),ppc)
 CROSS_COMPILE = ppc_8xx-
 endif
 ifeq ($(ARCH),arm)
-CROSS_COMPILE = arm-linux-
+CROSS_COMPILE = arm-none-eabi-
 endif
 ifeq ($(ARCH),i386)
 CROSS_COMPILE = i386-linux-
diff --git a/cpu/arm920t/config.mk b/cpu/arm920t/config.mk
index 578e046..6ee2af4 100644
--- a/cpu/arm920t/config.mk
+++ b/cpu/arm920t/config.mk
@@ -30,8 +30,12 @@ PLATFORM_CPPFLAGS += -march=armv4t
 # Supply options according to compiler version
 #
 # =========================================================================
-PLATFORM_CPPFLAGS +=$(call cc-option,-mapcs-32,-mabi=apcs-gnu)
+#PLATFORM_CPPFLAGS +=$(call cc-option,-mapcs-32,-mabi=apcs-gnu)
+#PLATFORM_CPPFLAGS +=$(call cc-option,-mno-thumb-interwork,)
+
+PLATFORM_CPPFLAGS +=$(call cc-option,)
 PLATFORM_CPPFLAGS +=$(call cc-option,-mno-thumb-interwork,)
+
 PLATFORM_RELFLAGS +=$(call cc-option,-mshort-load-bytes,$(call cc-option,-malignment-traps,))
 PLATFORM_LDFLAGS += --defsym raise=hang
 
$ make -j4
说明：这里的-j4是并行编译的意思，笔者的机器为双核，因此这里选择j4,一般来说jN，N=2×cpu核心数目。

编译完成以后，我们在当前目录下得到uboot的2进制程序。

3. 启动uboot
说明：为了操作的简单，笔者对qemu定义了alias

prife@smart:~/projects/git/uboot-mini2400$ qemu -M mini2440 -serial stdio -mtdblock u-boot-nand2k.bin 

mini2440_init: Boot mode: NAND
mini2440_init: Unknown NAND size/id 235520 (0MB) defaulting to old 64MB
S3C: CLK=240 HCLK=240 PCLK=240 UCLK=57
QEMU: ee24c08_init
DM9000: INIT QEMU MAC : 52:54:00:12:34:56
nand_init no/invalid block device, allocating 131072*16 in ram
QEMU mini2440_reset: loaded default u-boot from NAND
QEMU mini2440_reset: loaded override u-boot (size 39800)
S3C: CLK=240 HCLK=60 PCLK=30 UCLK=57
S3C: CLK=240 HCLK=60 PCLK=30 UCLK=48
S3C: CLK=405 HCLK=101 PCLK=50 UCLK=48


U-Boot 1.3.2-mini2440 (Jul  8 2012 - 21:58:33)

I2C:   ready
DRAM:  64 MB
NOR Flash not found. Use hardware switch and 'flinit'
Flash:  0 kB
NAND:  Bad block table not found for chip 0
Bad block table not found for chip 0
64 MiB
*** Warning - bad CRC or NAND, using default environment

USB:   S3C2410 USB Deviced
In:    serial
Out:   serial
Err:   serial
MAC: 08:08:11:18:12:27
Hit any key to stop autoboot:  0 
MINI2440 # 
MINI2440 # 
MINI2440 # 
  s3c24xx autoscr bdinfo go reset bootm boot bootd iminfo imls coninfo date
  dynenv ext2ls ext2load fatload fatls fatinfo ...
MINI2440 # 

4. 配置qemu的网络功能

在上面的介绍中，我们使用mini2440-qemu启动了uboot，但是此时的qemu并没有网络功能，那么也就不能使用u-boot通过NFS或者TFTP来加载内核或者文件系统，为了方便开发，接下来，我们为qemu配置网络功能。

qemu支持多种网络链接方式，其中最常用的就是桥接(bridge)。 这需要依赖内核的tun/tap模块的支持。

安装必要的工具包
$ sudo apt-get install uml-utilities
$ sudo apt-get install bridge-utils

首先执行
$ ls -l /dev/net/tun 
crw-rw-rwT 1 root root 10, 200 Jul 26 08:28 /dev/net/tun

如果上面的文件存在，这表明内核已经支持开启了tun支持，ubuntu12.04中，这个功能默认已经开启。如果这个文件不存在，则需要加载tun模块，并创建/dev/net/tun文件。

修改下面三个文件
/etc/network/interfaces 
添加
/etc/qemu-ifup
/etc/qemu-ifdown

修改 /etc/network/interfaces，笔者的文件如下：
$ cat /etc/network/interfaces 
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug eth0
#iface eth0 inet dhcp
iface eth0 inet manual

auto br0
iface br0 inet dhcp
   bridge_ports eth0

默认情况下，当qemu使用tap设备时，会执行/etc/qemu-ifup和/etc/qemu-ifdown这两个脚本。
我们需要创建这两个脚本，然后为它们加上可执行权限(使用chmod +x)，然后将它们放在/etc/目录下。 

创建/etc/qemu-ifup 脚本，内容如下所示
$ cat /etc/qemu-ifup
#!/bin/sh

echo sudo tunctl -u $(id -un) -t $1
sudo tunctl -u $(id -un) -t $1

echo sudo ifconfig $1 0.0.0.0 promisc up
sudo ifconfig $1 0.0.0.0 promisc up

echo sudo brctl addif br0 $1
sudo brctl addif br0 $1

echo brctl show
brctl show

创建/etc/qemu-ifdown脚本，如下所示
$ cat /etc/qemu-ifdown
#!/bin/sh

echo sudo brctl delif br0 $1
sudo brctl delif br0 $1

echo sudo tunctl -d $1
sudo tunctl -d $1

echo brctl show
brctl show

5. 运行带有网络功能的mini2440-qemu

重启计算机，使/etc/network/interfaces的配置生效。
$ qemu -M mini2440 -mtdblock u-boot.nand -serial stdio -net nic,vlan=0 -net tap,vlan=0,ifname=tap0

如果出现如下信息：
warning: could not configure /dev/net/tun: no virtual network emulation
Could not initialize device 'tap'

那么先手动执行如下命令
$ /etc/qemu-ifup tap0
注意：不可使用sudo执行上述命令

此时就可以顺利进入uboot了，然后
uboot > dhcp 
修改  serverip

PC主机启动 tftp & nfs
此时uboot中就可以正常使用tftp和nfs了。

为了方便操作，笔者创建了一个简单的脚本，如下：
prife@smart:~/tftp$ cat start 
/etc/qemu-ifup tap0
sudo service tftpd-hpa restart
sudo /etc/init.d/nfs-kernel-server restart

以及qemu启动脚本脚本 runlinux.sh
prife@smart:~/tftp$ cat runlinux.sh 
#!/bin/bash

export KK='/home/prife/projects/git/mini2440-kernel/arch/arm/boot/uImage'

/home/prife/projects/git/mini2440-qemu/arm-softmmu/qemu-system-arm \
	-M mini2440 -kernel $KK -mtdblock u-boot.nand -serial stdio \
	-net nic,vlan=0 -net tap,vlan=0,ifname=tap0 \
	-usb -usbdevice keyboard -usbdevice mouse
	#-show-cursor 

每次启动ubuntu后，需要执行一次start脚本，之后启动qemu，只要执行 runlinux.sh即可。

6. 更进一步：
实际上，友善之臂官方网站提供的Linux内核以及文件系统，我们完全可以使用mini2440-qemu开启，笔者这里暂不介绍。

什么是tun:
http://www.51know.info/system_base/tun_tap.html
http://linux.chinaunix.net/docs/2006-11-24/3296.shtml

prife@smart:~/projects/git/uboot-mini2400$ qemu -M mini2440 -serial stdio -mtdblock u-boot-nand2k.bin -net nic,vlan=0 -net tap,vlan=0,ifname=tap0
warning: could not configure /dev/net/tun: no virtual network emulation
Could not initialize device 'tap'

http://code.google.com/p/mini2440/w/list

补充说明：
http://www.arm9home.net/simple/index.php?t15864.html
http://project4fun.com/node/33

参考：
http://forums.debian.net/viewtopic.php?f=5&t=67398
--------------------------------------------------------------------------------
bare-metal: 裸机
命名规则
arm-none-linux-gnueabi (CodeSourcery ARM compiler for linux)
arm-none-eabi (CodeSourcery ARM compiler for bare-metal systems)
arm-eabi (Android ARM compiler)

The naming comes down to this:
arch-vendor-(os-)abi
x86_64-w64-mingw32 = x86_64 architecture (=AMD64), w64 (=mingw-w64 as "vendor"), mingw32 (=win32 API as seen by GCC)
i686-pc-msys = 32-bit (pc=generic name) msys binary
i686-unknown-linux-gnu = 32-bit GNU/linux

And your example specifically:
arm-none-linux-gnueabi = ARM architecture, no vendor, linux OS, and the gnueabi ABI.

The arm-eabi is alike you say, used for Android native apps.

更换工具后成功：当前的工具链版本为：
arm-2010q1-188-arm-none-eabi.bin
20110314 arm-none-eabi.bin 和 arm-none-linux-gnueabi.bin都会爆EABI version 0错误
--------------------------------------------------------------------------------
